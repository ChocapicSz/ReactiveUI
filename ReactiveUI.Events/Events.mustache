using System;
using System.Reactive;
using System.Reactive.Linq;
using System.Reactive.Subjects;
#if !NET_40 && !NET_35
using ReactiveUI.Events;
#endif

{{#Namespaces}}
using {{Name}};
{{/Namespaces}}
{{#DelegateNamespaces}}
using {{Name}};
{{/DelegateNamespaces}}

{{#Namespaces}}
namespace {{Name}}
{
    public static class EventsMixin
    {
{{#Types}}
        public static {{Name}}Events{{GenericArgs}} Events{{GenericArgs}}(this {{Name}}{{GenericArgs}} This){{GenericConstraints}}
        {
            return new {{Name}}Events{{GenericArgs}}(This);
        }
{{/Types}}
    }

{{#Types}}
    public class {{Name}}Events{{GenericArgs}}
{{#Parent}}
        : {{Name}}Events{{GenericArgs}}
{{/Parent}}
{{GenericConstraints}}
    {
        {{Name}}{{GenericArgs}} This;

        public {{Name}}Events({{Name}}{{GenericArgs}} This)
{{#Parent}}
            : base(This)
{{/Parent}}
        {
            this.This = This;
        }

{{#Events}}
        public IObservable<{{EventArgsType}}> {{Name}} {
            get { return Observable.FromEvent<{{EventHandlerType}}, {{EventArgsType}}>(onNext => (sender, e) => onNext(e), x => This.{{Name}} += x, x => This.{{Name}} -= x); }
        }

{{/Events}}
    }
{{/Types}}
}
{{/Namespaces}}

{{#DelegateNamespaces}}
namespace {{Name}}.Rx
{
{{#Types}}
    public {{Abstract}} partial class {{Name}}Rx : {{Name}}
    {
{{#ZeroParameterMethods}}
        readonly SingleAwaitSubject<Unit> _{{Name}} = new SingleAwaitSubject<Unit>();
        public IObservable<Unit> {{Name}}Obs { get { return _{{Name}}; } }
        public override void {{Name}}()
        {
            _{{Name}}.OnNext(Unit.Default);
        }

{{/ZeroParameterMethods}}
{{#SingleParameterMethods}}
        readonly SingleAwaitSubject<{{ParameterType}}> _{{Name}} = new SingleAwaitSubject<{{ParameterType}}>();
        public IObservable<{{ParameterType}}> {{Name}}Obs { get { return _{{Name}}; } }
        public override void {{Name}}({{ParameterType}} {{ParameterName}})
        {
            _{{Name}}.OnNext({{ParameterName}});
        }

{{/SingleParameterMethods}}
{{#MultiParameterMethods}}
        readonly SingleAwaitSubject<Tuple<{{ParameterTypeList}}>> _{{Name}} = new SingleAwaitSubject<Tuple<{{ParameterTypeList}}>>();
        public IObservable<Tuple<{{ParameterTypeList}}>> {{Name}}Obs { get { return _{{Name}}; } }
        public override void {{Name}}({{ParameterList}})
        {
            _{{Name}}.OnNext(Tuple.Create({{ParameterNameList}}));
        }

{{/MultiParameterMethods}}
    }
{{/Types}}
}
{{/DelegateNamespaces}}
